class Drower {

    function void DrawBrick(Brick brick) {
        var int memAddress;
        var int x;
        var int y;
        var bool alive;
        let x = brick.getX();
        let y = brick.getY();
        let alive = brick.getAlive();
        if (alive = false){
            return;
        } 
        let x = Math.min(x, 512 - 16);
        let y = Math.min(y, 256 - 16);
        let memAddress = 16384 + (32 * y) + (x / 16);
        do Memory.poke(memAddress + 0, -30751);
        do Memory.poke(memAddress + 32, -31711);
        do Memory.poke(memAddress + 64, -961);
        do Memory.poke(memAddress + 96, -30751);
        do Memory.poke(memAddress + 128, -31711);
        do Memory.poke(memAddress + 160, -961);
        do Memory.poke(memAddress + 192, -30751);
        do Memory.poke(memAddress + 224, -31711);
        do Memory.poke(memAddress + 256, -961);
        do Memory.poke(memAddress + 288, -30751);
        do Memory.poke(memAddress + 320, -31711);
        do Memory.poke(memAddress + 352, -961);
        do Memory.poke(memAddress + 384, -30751);
        do Memory.poke(memAddress + 416, -31711);
        do Memory.poke(memAddress + 448, -961);
        do Memory.poke(memAddress + 480, 2016);
        let x = x + 16;
        let memAddress = 16384 + (32 * y) + (x / 16);
        do Memory.poke(memAddress + 0, -30751);
        do Memory.poke(memAddress + 32, -31711);
        do Memory.poke(memAddress + 64, -961);
        do Memory.poke(memAddress + 96, -30751);
        do Memory.poke(memAddress + 128, -31711);
        do Memory.poke(memAddress + 160, -961);
        do Memory.poke(memAddress + 192, -30751);
        do Memory.poke(memAddress + 224, -31711);
        do Memory.poke(memAddress + 256, -961);
        do Memory.poke(memAddress + 288, -30751);
        do Memory.poke(memAddress + 320, -31711);
        do Memory.poke(memAddress + 352, -961);
        do Memory.poke(memAddress + 384, -30751);
        do Memory.poke(memAddress + 416, -31711);
        do Memory.poke(memAddress + 448, -961);
        do Memory.poke(memAddress + 480, 2016);
        let y = y + 16;
        let memAddress = 16384 + (32 * y) + (x / 16);
        do Memory.poke(memAddress + 0, -30751);
        do Memory.poke(memAddress + 32, -31711);
        do Memory.poke(memAddress + 64, -961);
        do Memory.poke(memAddress + 96, -30751);
        do Memory.poke(memAddress + 128, -31711);
        do Memory.poke(memAddress + 160, -961);
        do Memory.poke(memAddress + 192, -30751);
        do Memory.poke(memAddress + 224, -31711);
        do Memory.poke(memAddress + 256, -961);
        do Memory.poke(memAddress + 288, -30751);
        do Memory.poke(memAddress + 320, -31711);
        do Memory.poke(memAddress + 352, -961);
        do Memory.poke(memAddress + 384, -30751);
        do Memory.poke(memAddress + 416, -31711);
        do Memory.poke(memAddress + 448, -961);
        do Memory.poke(memAddress + 480, 2016);
        let x = x - 16;
        let memAddress = 16384 + (32 * y) + (x / 16);
        do Memory.poke(memAddress + 0, -30751);
        do Memory.poke(memAddress + 32, -31711);
        do Memory.poke(memAddress + 64, -961);
        do Memory.poke(memAddress + 96, -30751);
        do Memory.poke(memAddress + 128, -31711);
        do Memory.poke(memAddress + 160, -961);
        do Memory.poke(memAddress + 192, -30751);
        do Memory.poke(memAddress + 224, -31711);
        do Memory.poke(memAddress + 256, -961);
        do Memory.poke(memAddress + 288, -30751);
        do Memory.poke(memAddress + 320, -31711);
        do Memory.poke(memAddress + 352, -961);
        do Memory.poke(memAddress + 384, -30751);
        do Memory.poke(memAddress + 416, -31711);
        do Memory.poke(memAddress + 448, -961);
        do Memory.poke(memAddress + 480, 2016);
        return;
    }

    function void DrawBullet(Bullet bullet) {
        var int x;
        var int y;
        var int size;
        var int direction;
        let direction = bullet.getDirection();
        let x = bullet.getX();
        let y = bullet.getY();
        let size = bullet.getSize();

        if ((x > 0) & (x < 512) & (x + size > 0) & (x + size < 512))
        {
            if ((y > 0) & (y < 256) & (y + size > 0) & (y + size < 256))
            {
                do Screen.setColor(true);
                do Screen.drawRectangle(x, y, x + size, y + size);
            }
        }
        
        return;
    }

    function void DrawPlayer(Player player) {
        var int x;
        var int y;
        var int direction;
        let direction = player.getDirection();
        let x = player.getX();
        let y = player.getY();
        let x = Math.max(x, 0);
        let y = Math.max(y, 0);
        let x = Math.min(x, 512 - 32);
        let y = Math.min(y, 256 - 32);
        
        if (direction = 1){
            do DrawPlayer.DrawPlayerUp(x, y);
        }
        if (direction = 2){
            do DrawPlayer.DrawPlayerDown(x, y);
        }
        if (direction = 3){
            do DrawPlayer.DrawPlayerLeft(x, y);
        }
        if (direction = 4){
            do DrawPlayer.DrawPlayerRight(x, y);
        }

        return;
    }

    function void clearBullet(Bullet bullet)
    {
        var int x;
        var int y;
        var int size;
        let x = bullet.getX();
        let y = bullet.getY();
        let size = bullet.getSize();
        do Screen.setColor(false);
        if ((x > 0) & (x < 512) & (x + size > 0) & (x + size < 512))
        {
            if ((y > 0) & (y < 256) & (y + size > 0) & (y + size < 256))
            {
                do Screen.drawRectangle(x, y, x + size, y + size);
            }
        }
        return;
    }

    function void DrawBot(Bot bot){
        var int x;
        var int y;
        var int direction;
        let direction = bot.getDirection();
        let x = bot.getX();
        let y = bot.getY();
        let x = Math.max(x, 0);
        let y = Math.max(y, 0);
        let x = Math.min(x, 512 - 32);
        let y = Math.min(y, 256 - 32);
        
        if (direction = 1){
            do DrawBot.DrawBotUp(x, y);
        }
        if (direction = 2){
            do DrawBot.DrawBotDown(x, y);
        }
        if (direction = 3){
            do DrawBot.DrawBotLeft(x, y);
        }
        if (direction = 4){
            do DrawBot.DrawBotRight(x, y);
        }

        return;
    }

    function void DrawBase(Base base){
        var int memAddress;
        var int x;
        var int y;
        let x = base.getX();
        let y = base.getY();
        let y = y + 8;
        let memAddress = 16384 + (32 * y) + (x / 16);
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 4092);
        do Memory.poke(memAddress + 96, 20464);
        do Memory.poke(memAddress + 128, -8224);
        do Memory.poke(memAddress + 160, -32);
        do Memory.poke(memAddress + 192, -64);
        do Memory.poke(memAddress + 224, -64);
        do Memory.poke(memAddress + 256, -64);
        do Memory.poke(memAddress + 288, -256);
        do Memory.poke(memAddress + 320, -1024);
        do Memory.poke(memAddress + 352, -2048);
        do Memory.poke(memAddress + 384, -4096);
        do Memory.poke(memAddress + 416, -8192);
        do Memory.poke(memAddress + 448, -32000 - 768);
        let x = x + 16;
        let memAddress = 16384 + (32 * y) + (x / 16);
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 16368);
        do Memory.poke(memAddress + 96, 4082);
        do Memory.poke(memAddress + 128, 2043);
        do Memory.poke(memAddress + 160, 2047);
        do Memory.poke(memAddress + 192, 1023);
        do Memory.poke(memAddress + 224, 1023);
        do Memory.poke(memAddress + 256, 1023);
        do Memory.poke(memAddress + 288, 255);
        do Memory.poke(memAddress + 320, 63);
        do Memory.poke(memAddress + 352, 31);
        do Memory.poke(memAddress + 384, 15);
        do Memory.poke(memAddress + 416, 7);
        do Memory.poke(memAddress + 448, 1);
        do Memory.poke(memAddress + 480, 0);
    
        return;
    }
}