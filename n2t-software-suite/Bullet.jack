class Bullet
{
    field int x;
    field int y;
    field int direction;
    field int size;
    field bool alive;

    constructor Bullet new(int _x, int _y, int _direction, int _size)
    {
        let x = _x;
        let y = _y;
        let direction = _direction;
        let alive = true;
        let size = _size;
        do draw();
        return this;
    }

    //временные методы
    method void draw()
    {
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x + size, y + size);
       return;
    }
    //временные методы

    //method void erase(){
    //    do Screen.setColor(false);
    //    do Screen.drawRectangle(x, y, x + size, y + size);
    //    return;
    //}


    method int getX()
    {
        return x;
    }

    method void setX(int _x)
    {
        let x = _x;
        return;
    }

    method int getY()
    {
        return y;
    }
    method void setY(int _y)
    {
        let y = _y;
        return;
    }

    method int getDirection()
    {
        return direction;
    }

    method bool getAlive()
    {
        return alive;
    }
    method void setAlive(bool _alive)
    {
        let alive = _alive;
        return;
    }

    method int getSize()
    {
        return size;
    }
    method void setSize(int _size)
    {
        let size = _size;
        return;
    }

    method void moveUp()
    {
        //do Screen.setColor(true);
        //do Screen.drawRectangle(x + 20, y + 20, x + 30, y + 30);
        if (y > 1){
            //do Screen.setColor(false);
            //do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
            let y = y - 2;
            //do Screen.setColor(true);
            //do Screen.drawRectangle(x, y, x + size, y + 1);
        } 
        do Sys.wait(5);
        return;
    }

     method void moveDown() {
        if ((y + size) < 254) {
            //do Screen.setColor(false);
            //do Screen.drawRectangle(x, y, x + size, y + 1);
            let y = y + 2;
            //do Screen.setColor(true);
            //do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
        }
        do Sys.wait(5);
        return;
    }

    method void moveLeft() {
        if (x > 1) {
            //do Screen.setColor(false);
            //do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
            let x = x - 2;
            //do Screen.setColor(true);
            //do Screen.drawRectangle(x, y, x + 1, y + size);
        }
        do Sys.wait(5);
        return;
    }

    method void moveRight() {
        if ((x + size) < 510) {
            //do Screen.setColor(false);
            //do Screen.drawRectangle(x, y, x + 1, y + size);
            let x = x + 2;
            //do Screen.setColor(true);
            //do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
        }
        do Sys.wait(5);
        return;
    }

    function void CraftBullet(int direction, Player player, Objects map){
        var Bullet bullet;
        var int xPlayer;
        var int yPlayer;
        var int playerSize;
        var int x_bullet_Up_Down;
        var int y_bullet_Left_Right;
        let xPlayer = player.getX();
        let yPlayer = player.getY();
        let playerSize = player.getSize();
        let x_bullet_Up_Down = xPlayer + (playerSize / 2) - 5; // координата player.X + размер / 2 - половина от размера пули
        let y_bullet_Left_Right = yPlayer + (playerSize / 2) - 5; // координата player.Y + размер / 2 - половина от размера пули
        
        if (direction = 1){ //Up
            if (yPlayer - 20 < 0){return;}
            let bullet = Bullet.new(x_bullet_Up_Down, yPlayer - 20, direction, 10);
            while (bullet.getY() > 1){do bullet.moveUp(); do Drower.clearBullet(bullet); do Drower.DrawBullet(bullet);}
        }
        if (direction = 2){ //Down
            if (yPlayer + playerSize + 20 > 256){return;}
            let bullet = Bullet.new(x_bullet_Up_Down, yPlayer + playerSize + 20, direction, 10);
        }
        if (direction = 3){ //Left
            if (xPlayer - 20 < 0){return;}
            let bullet = Bullet.new(xPlayer - 20, y_bullet_Left_Right, direction, 10);
        }
        if (direction = 4){ //Right
            if (xPlayer + playerSize + 20 > 512){return;}
            let bullet = Bullet.new(xPlayer + playerSize + 20, y_bullet_Left_Right, direction, 10);
            do bullet.moveRight();
        }

        do map.addNewBullet(bullet);

        return;
    }

    method void dispose()
    {

        do Memory.deAAlloc(this);
        return;
    }
}