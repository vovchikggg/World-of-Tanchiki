class Game {
    field Objects map;
    field Player player;
    field Base base;
    field BotsList botsList;
    field BricksList bricksList;
    field BulletsList bulletsList;
    field ExitGame exitGame;
    field int levelNumber;
    field Level level;
    field CurrentLevel currentLevel;
    field boolean exitLevel;
    field int playerTime;
    field int botsTime;
    field int countBots;

    constructor Game new(ExitGame _exitGame, Level _level, CurrentLevel _currentLevel){
        let level = _level;
        let currentLevel = _currentLevel;
        let levelNumber = _currentLevel.getLevel();
        let exitLevel = false;

        if (levelNumber = 1)
        {
            let map = level.getFirstLevel();
            let countBots = _level.countBotsFirstLevel();
        }
        if (levelNumber = 2)
        {
            let map = level.getSecondLevel();
            let countBots = _level.countBotsSecondLevel();
        }

        let player = map.getPlayer();
        let base = map.getBase();
        do map.setMap();
        do map.drowAllObjects(this);
        let exitGame = _exitGame;

        return this;
    }

    method void setCountBots(int _countBots)
    {
        let countBots = _countBots;
        return;
    }

    method int getCountBots()
    {
        return countBots;
    }

    method void MoveKeyboard(char key){
        if (key = 131) { // Up
            do player.setDirection(1);
            do player.movePlayer();
        }

        if (key = 133) { // Down
            do player.setDirection(2);
            do player.movePlayer();
        }

        if (key = 130) { //Left
            do player.setDirection(3);
            do player.movePlayer();
        }

        if (key = 132) { //Right
            do player.setDirection(4);
            do player.movePlayer();
        }
        return;
    }

    method void LogicKeyGame(char key)
    {
        do LogicLevelGame(key);
        do additionalKeyLogicGame(key);

        return;
    }

    method void LogicLevelGame(char key)
    {
        if (key = 49) // 1 Level (Нажать на 1)
        {
            do currentLevel.setLevel(1);
            let exitLevel = true;
        }

        if (key = 50) // 2 Level (Нажать на 2)
        {
            do currentLevel.setLevel(2);
            let exitLevel = true;
        }

        return;
    }

    method void additionalKeyLogicGame(char key)
    {
        if (key = 81) // Q - выйти
        {
            let exitLevel = true;
            do exitGame.setExitGame(true);
        }

        if (base.getAlive() = false)
        {
            let exitLevel = true;
            do disposeLose();
        }

        if (key = 32) // Space - пуля
        {   
            if (player.getAlive() = true)
            {
                if (playerTime > player.getTimeBetweenAtacks())
                {
                    do player.Atack();
                    let playerTime = 0;
                }
            }
        }

        return;
    }

    method void mapWork()
    {
        do map.killObjectsWithBullet();
        do map.removeDeadObjects();
        do map.drowAllObjects(this);

        return;
    }

    method void ListWork()
    {
        let botsList = map.getBotsList();
        let bricksList = map.getBricksList();
        let bulletsList = map.getBulletsList();

        do bulletsList.clearBullets();
        do bulletsList.moveBullets();
        do botsList.moveBots();

        //if (botsList.getNext() = null)
        //{
        //    do map.drowAllObjects();
        //    do dispose();
        //}

        return;
    }

    method void run(){
        var char key;

        let playerTime = 0;
        let botsTime = 0;

        while (~exitLevel){
            let key = Keyboard.keyPressed();
            
            if (countBots = 0)
            {
                let exitLevel = true;
            }
            do LogicKeyGame(key);

            if (player.getAlive() = true)
            {
                do MoveKeyboard(key);
            }
            
            if (botsTime > 25)
            {
                do botsList.botsAtack();
                let botsTime = 0;
            }


            do ListWork();
            do mapWork();

            let playerTime = playerTime + 1;
            let botsTime = botsTime + 1;
        }
        return;
    }

    method void disposeLose()
    {
        do Screen.setColor(false);
        do Screen.drawRectangle(0,0,511,255);
        do Memory.deAlloc(this);
        return;
    }

    
    method void disposeWin()
    {
        do Screen.setColor(false);
        do Screen.drawRectangle(0,0,511,255);
        do Memory.deAlloc(this);
        return;
    }
}