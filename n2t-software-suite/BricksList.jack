class BricksList
{
    field Brick data;
    field BricksList next;
    field BricksList prev;

    field BricksList currentBrick;
    field BricksList tempBrick;
    field Brick brick;

    field BricksList bricksList;
    field BricksList prevBrick;
    field BricksList nextBrick;

    constructor BricksList new(Brick _data, BricksList _next)
    {
        let data = _data;
        let next = _next;
        return this;
    }

    method Brick getData()
    {
        return data;
    }

    method BricksList getNext()
    {
        return next;
    }
    method void setNext(BricksList _next)
    {
        let next = _next;
        return;
    }

    method BricksList getPrev()
    {
        return prev;
    }
    method void setPrev(BricksList _prev)
    {
        let prev = _prev;
        return;
    }

    method void drowBricks()
    {
        let currentBrick = this;
        while (~(currentBrick = null))
        {
            let brick = currentBrick.getData();
            if (brick.getAlive() = true)
            {
                do Drower.DrawBrick(brick);
            }
            let currentBrick = currentBrick.getNext();
        }

        return;
    }

    method void killBricksWithBullet(Bullet bullet)
    {
        var bool exit;

        let currentBrick = this;
        let exit = false;
        while ( (~(currentBrick = null)) & (~(exit)) )
        {
            let brick = currentBrick.getData();
            if (brick.getAlive() = true)
            {
                if ( BulletCollisions.CheckCollisionsWithBrick(brick, bullet, bullet.getX(), bullet.getY()) = true )
                {
                    do brick.setAlive(false);
                    do bullet.setAlive(false);
                    let exit = true;
                }
            }
            let currentBrick = currentBrick.getNext();
        }

        return;
    }

    method void removeDeadBricksFromList()
    {
        let currentBrick = this;
        while (~(currentBrick = null))
        {
            let tempBrick = currentBrick.getNext();

            let brick = currentBrick.getData();
            if (brick.getAlive() = false)
            {
                do removeDeadBrick(currentBrick);
                //do currentBrick.dispose();
            }

            let currentBrick = tempBrick;
        }

        return;
    }

    method void removeDeadBrick(BricksList currentBrick)
    {
        let bricksList = this;
        let prevBrick = currentBrick.getPrev();
        let nextBrick = currentBrick.getNext();

        if (~(prevBrick = null))
        {
            do prevBrick.setNext(nextBrick);
            if (~(nextBrick = null))
            {
                do nextBrick.setPrev(prevBrick);
            }
        }
        else
        {
            let bricksList = bricksList.getNext();
            if (~(bricksList = null))
            {
                do bricksList.setPrev(null);
            }
        }

        return;
    }

    method void dispose()
    {
        do data.dispose();
        do Memory.deAlloc(this);
        return;
    }
}