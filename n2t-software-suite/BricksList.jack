class BricksList
{
    field Brick data;
    field BricksList next;
    field BricksList prev;

    constructor BricksList new(Brick _data, BricksList _next)
    {
        let data = _data;
        let next = _next;
        return this;
    }

    method Brick getData()
    {
        return data;
    }

    method BricksList getNext()
    {
        return next;
    }
    method void setNext(BricksList _next)
    {
        let next = _next;
        return;
    }

    method BricksList getPrev()
    {
        return prev;
    }
    method void setPrev(BricksList _prev)
    {
        let prev = _prev;
        return;
    }

    method void drowBricks()
    {
        var BricksList currentBrick;
        var Brick brick;

        let currentBrick = this;
        while (~(currentBrick = null))
        {
            let brick = currentBrick.getData();
            if (brick.getAlive() = true)
            {
                do Drower.DrawBrick(brick);
            }
            let currentBrick = currentBrick.getNext();
        }

        return;
    }

    method void killBricksWithBullet(Bullet bullet)
    {
        var BricksList currentBrick;
        var Brick brick;
        var bool exit;

        let currentBrick = this;
        let exit = false;
        while ( (~(currentBrick = null)) & (~(exit)) )
        {
            let brick = currentBrick.getData();
            if (brick.getAlive() = true)
            {
                if ( BulletCollisions.CheckCollisionsWithBrick(brick, bullet, bullet.getX(), bullet.getY()) = true )
                {
                    do brick.setAlive(false);
                    do bullet.setAlive(false);
                    let exit = true;
                }
            }
            let currentBrick = currentBrick.getNext();
        }

        return;
    }

    method void dispose(){
        do Memory.deAlloc(this);
        return;
    }
}