class Objects
{
    field Player player;
    //field BotsList botsList;
    field BricksList bricksList;
    field BulletsList bulletsList;

    constructor Objects new()
    {
        let player = null;
        //let botsList = null;
        let bricksList = null;
        let bulletsList = null;
        return this;
    }

    method List getPlayer()
    {
        return player;
    }
    method void setPlayer(Player _player)
    {
        let player = _player;
        return;
    }

    //method BotsList getBotsList()
    //{
    //    return botsList;
    //}
    //method void addNewBot(Bot _bot) {
    //    let botsList = BotsList.new(_bot, botsList);
    //    return;
    //}

    method BricksList getBricksList()
    {
        return bricksList;
    }
    method void addNewBrick(Brick _brick) {
        let bricksList = BricksList.new(_brick, bricksList);
        return;
    }

    method List getBulletsList()
    {
        return bulletsList;
    }

    method void addNewBullet(Bullet _bullet) {
        let bulletsList = BulletsList.new(_bullet, bulletsList);
        return;
    }

    method void drowAllObjects()
    {
        //var BotsList currentBot;
        var BricksList currentBrick;
        var BulletsList currentBullet;

        //var Bot bot;
        var Brick brick;
        var Bullet bullet;

        do Drower.DrawPlayer(player);

        //let currentBot = botsList;
        //while (~(currentBot = null))
        //{
        //    let bot = currentBot.getData();
        //    if (bot.getAlive() = true)
        //    {
        //        do Drower.DrawBot(bot);
        //    }
        //    let currentBot = currentBot.getNext();
        //}

        let currentBrick = bricksList;
        while (~(currentBrick = null))
        {
            let brick = currentBrick.getData();
            if (brick.getAlive() = true)
            {
                do Drower.DrawBrick(brick);
            }
            let currentBrick = currentBrick.getNext();
        }

        let currentBullet = bulletsList;
        while (~(currentBullet = null))
        {
            let bullet = currentBullet.getData();
            if (bullet.getAlive() = true)
            {
                do Drower.DrawBullet(bullet);
            }
            let currentBullet = currentBullet.getNext();
        }

        return;
    }

    method void moveBullets()
    {
        var BulletsList currentBullet;
        var Bullet bullet;
        let currentBullet = bulletsList;
        while (~(currentBullet = null))
        {
            let bullet = currentBullet.getData();
            do bullet.moveBullet();

            let currentBullet = currentBullet.getNext();
        }
        return;
    }

    method void clearBullets()
    {
        var BulletsList currentBullet;
        var Bullet bullet;
        let currentBullet = bulletsList;

        while (~(currentBullet = null))
        {
            let bullet = currentBullet.getData();

            do Drower.clearBullet(bullet);
            let currentBullet = currentBullet.getNext();
        }
        return;
    }

    method void dispose()
    {
        do Memory.deAAlloc(this);
        return;
    }
}