class Objects
{
    field Player player;
    field BotsList botsList;
    field BricksList bricksList;
    field BulletsList bulletsList;

    constructor Objects new()
    {
        let player = null;
        let botsList = null;
        let bricksList = null;
        let bulletsList = null;
        return this;
    }

    method void setMap()
    {
        var BotsList currentBot;
        var BricksList currentBrick;
        var BulletsList currentBullet;

        var Bot bot;
        var Brick brick;
        var Bullet bullet;

        do player.setMap(this);

        let currentBot = botsList;
        while (~(currentBot = null))
        {
            let bot = currentBot.getData();
            if (bot.getAlive() = true)
            {
                do bot.setMap(this);
            }
            let currentBot = currentBot.getNext();
        }

        let currentBrick = bricksList;
        while (~(currentBrick = null))
        {
            let brick = currentBrick.getData();
            if (brick.getAlive() = true)
            {
                do brick.setMap(this);
            }
            let currentBrick = currentBrick.getNext();
        }

        let currentBullet = bulletsList;
        while (~(currentBullet = null))
        {
            let bullet = currentBullet.getData();
            if (bullet.getAlive() = true)
            {
                do bullet.setMap(this);
            }
            let currentBullet = currentBullet.getNext();
        }

        return;
    }

    method List getPlayer()
    {
        return player;
    }
    method void setPlayer(Player _player)
    {
        let player = _player;
        return;
    }

    method BotsList getBotsList()
    {
        return botsList;
    }
    method void addNewBot(Bot _bot) {
        let botsList = BotsList.new(_bot, botsList);
        return;
    }

    method BricksList getBricksList()
    {
        return bricksList;
    }
    method void addNewBrick(Brick _brick) {
        let bricksList = BricksList.new(_brick, bricksList);
        return;
    }

    method List getBulletsList()
    {
        return bulletsList;
    }

    method void addNewBullet(Bullet _bullet) {
        var BulletsList previous;
        let previous = bulletsList;
        let bulletsList = BulletsList.new(_bullet, bulletsList);
        if (~(previous = null))
        {
            do previous.setPrev(bulletsList);
        }
        return;
    }

    method void clearAllObjects()
    {
        var BotsList currentBot;
        var BricksList currentBrick;
        var BulletsList currentBullet;

        var Bot bot;
        var Brick brick;
        var Bullet bullet;

        //do player.setAlive(false);

        let currentBot = botsList;
        while (~(currentBot = null))
        {
            let bot = currentBot.getData();
            do bot.setAlive(false);
            let currentBot = currentBot.getNext();
        }

        let currentBrick = bricksList;
        while (~(currentBrick = null))
        {
            let brick = currentBrick.getData();
            do brick.setAlive(false);
            let currentBrick = currentBrick.getNext();
        }

        let currentBullet = bulletsList;
        while (~(currentBullet = null))
        {
            let bullet = currentBullet.getData();
            do bullet.setAlive(false);
            let currentBullet = currentBullet.getNext();
        }

        return;
    }

    method void drowAllObjects()
    {
        var BotsList currentBot;
        var BricksList currentBrick;
        var BulletsList currentBullet;

        var Bot bot;
        var Brick brick;
        var Bullet bullet;

        do Drower.DrawPlayer(player);

        let currentBot = botsList;
        while (~(currentBot = null))
        {
            let bot = currentBot.getData();
            if (bot.getAlive() = true)
            {
                do Drower.DrawBot(bot);
            }
            let currentBot = currentBot.getNext();
        }

        let currentBrick = bricksList;
        while (~(currentBrick = null))
        {
            let brick = currentBrick.getData();
            if (brick.getAlive() = true)
            {
                do Drower.DrawBrick(brick);
            }
            let currentBrick = currentBrick.getNext();
        }

        let currentBullet = bulletsList;
        while (~(currentBullet = null))
        {
            let bullet = currentBullet.getData();
            if (bullet.getAlive() = true)
            {
                //do Output.printInt(bullet.getX());
                do Drower.DrawBullet(bullet);
            }
            let currentBullet = currentBullet.getNext();
        }

        return;
    }

    method void killObjects()
    {
        var BotsList currentBot;
        var BulletsList currentBullet;

        var Bot bot;
        var Bullet bullet;

        let currentBullet = bulletsList;
        while (~(currentBullet = null))
        {
            let bullet = currentBullet.getData();
            if (bullet.getAlive() = true)
            {
                do killPlayer(bullet);
                do killBot(bullet);
                do killBrick(bullet);
                do killBullet(bullet);
            }
            let currentBullet = currentBullet.getNext();
        }
        return;
    }

    method void killPlayer(Bullet bullet)
    {

        if ( BulletCollisions.CheckCollisionsWithPlayer(player, bullet, bullet.getX(), bullet.getY()) = true )
        {
            do bullet.setAlive(false);
            do brick.setAlive(false);
        }

        return;
    }

    method void killBot(Bullet bullet)
    {
        var BotsList currentBot;
        var Bot bot;
        var bool exit;
        let currentBot = botsList;
        let exit = false;
        while ( (~(currentBot = null)) & (~(exit)) )
        {
            let bot = currentBot.getData();
            if (bot.getAlive() = true)
            {
                if ( BulletCollisions.CheckCollisionsWithBot(bot, bullet, bullet.getX(), bullet.getY()) = true )
                {
                    do bullet.setAlive(false);
                    do bot.setAlive(false);
                    let exit = true;
                }
            }
            let currentBot = currentBot.getNext();
        }
        return;
    }

    method void killBrick(Bullet bullet)
    {
        var BricksList currentBrick;
        var Brick brick;
        var bool exit;
        let currentBrick = bricksList;
        let exit = false;
        while ( (~(currentBrick = null)) & (~(exit)) )
        {
            let brick = currentBrick.getData();
            if (brick.getAlive() = true)
            {
                if ( BulletCollisions.CheckCollisionsWithBrick(brick, bullet, bullet.getX(), bullet.getY()) = true )
                {
                    do bullet.setAlive(false);
                    do brick.setAlive(false);
                    let exit = true;
                }
            }
            let currentBrick = currentBrick.getNext();
        }
        return;
    }

    method void killBullet(Bullet bullet)
    {
        var BulletsList currentBullet;
        var Bullet bullet;
        var bool exit;
        let currentBullet = bulletsList;
        let exit = false;
        while ( (~(currentBullet = null)) & (~(exit)) )
        {
            let bullet = currentBullet.getData();
            if (bullet.getAlive() = true)
            {
                if ( BulletCollisions.CheckCollisionsWithBot(bullet, bullet, bullet.getX(), bullet.getY()) = true )
                {
                    do bullet.setAlive(false);
                    do bullet.setAlive(false);
                    let exit = true;
                }
            }
            let currentBullet = currentBullet.getNext();
        }
        return;
    }

    method void clearDeadBulletsFromList()
    {
        var BulletsList prevBullet;
        var BulletsList currentBullet;
        var BulletsList nextBullet;
        
        var Bullet bullet;

        let currentBullet = bulletsList;
        while (~(currentBullet = null))
        {
            let bullet = currentBullet.getData();
            if (bullet.getAlive() = false)
            {
                do clearBullet(currentBullet);
            }
            let currentBullet = currentBullet.getNext();
        }
        return;
    }

    method void clearBullet(BulletsList currentBullet)
    {
        var BulletsList prevBullet;
        var BulletsList nextBullet;
        let prevBullet = currentBullet.getPrev();
        let nextBullet = currentBullet.getNext();
        if (~(prevBullet = null))
        {
            do prevBullet.setNext(nextBullet);
            if (~(nextBullet = null))
            {
                do nextBullet.setPrev(prevBullet);
            }
        }
        else
        {
            let bulletsList = bulletsList.getNext();
            if (~(bulletsList = null))
            {
                do bulletsList.setPrev(null);
            }
        }
        return;
    }

    method void moveBullets()
    {
        var BulletsList currentBullet;
        var Bullet bullet;
        let currentBullet = bulletsList;
        while (~(currentBullet = null))
        {
            let bullet = currentBullet.getData();
            do bullet.moveBullet();

            let currentBullet = currentBullet.getNext();
        }
        return;
    }

    method void clearBullets()
    {
        var BulletsList currentBullet;
        var Bullet bullet;
        let currentBullet = bulletsList;

        while (~(currentBullet = null))
        {
            let bullet = currentBullet.getData();

            do Drower.clearBullet(bullet);
            let currentBullet = currentBullet.getNext();
        }
        return;
    }

    method void dispose()
    {
        do Memory.deAAlloc(this);
        return;
    }
}