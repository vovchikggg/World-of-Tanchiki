class Objects
{
    field Player player;
    field Base base;
    field BotsList botsList;
    field BricksList bricksList;
    field BulletsList bulletsList;

    constructor Objects new()
    {
        let player = null;
        let base = null;
        let botsList = null;
        let bricksList = null;
        let bulletsList = null;
        return this;
    }

    method List getPlayer()
    {
        return player;
    }
    method void setPlayer(Player _player)
    {
        let player = _player;
        return;
    }

    method List getBase()
    {
        return base;
    }
    method void setBase(Base _base)
    {
        let base = _base;
        return;
    }

    method BotsList getBotsList()
    {
        return botsList;
    }
    method void addNewBot(Bot _bot) {
        var BotsList previous;
        let previous = botsList;
        let botsList = BotsList.new(_bot, botsList);
        if (~(previous = null))
        {
            do previous.setPrev(botsList);
        }
        return;
    }

    method BricksList getBricksList()
    {
        return bricksList;
    }
    method void addNewBrick(Brick _brick) {
        var BricksList previous;
        let previous = bricksList;
        let bricksList = BricksList.new(_brick, bricksList);
        if (~(previous = null))
        {
            do previous.setPrev(bricksList);
        }
        return;
    }

    method List getBulletsList()
    {
        return bulletsList;
    }
    method void addNewBullet(Bullet _bullet) {
        var BulletsList previous;
        let previous = bulletsList;
        let bulletsList = BulletsList.new(_bullet, bulletsList);
        if (~(previous = null))
        {
            do previous.setPrev(bulletsList);
        }
        return;
    }

    method void setMap()
    {
        do player.setMap(this);
        do base.setMap(this);
        do botsList.setMap(this);

        return;
    }

    //НУЖНО СДЕЛАТЬ

    //method void disposeAllObjects()
    //{
    //    var BotsList currentBot;
    //    var BricksList currentBrick;
    //    var BulletsList currentBullet;

    //    var Bot bot;
    //    var Brick brick;
    //    var Bullet bullet;

    //    do player.setAlive(false);

    //    do base.setAlive(false);

    //    let currentBot = botsList;
    //    while (~(currentBot = null))
    //    {
    //        let bot = currentBot.getData();
    //        do bot.setAlive(false);
    //        let currentBot = currentBot.getNext();
    //    }

    //    let currentBrick = bricksList;
    //    while (~(currentBrick = null))
    //    {
    //        let brick = currentBrick.getData();
    //        do brick.setAlive(false);
    //        let currentBrick = currentBrick.getNext();
    //    }

    //    let currentBullet = bulletsList;
    //    while (~(currentBullet = null))
    //    {
    //        let bullet = currentBullet.getData();
    //        do bullet.setAlive(false);
    //        let currentBullet = currentBullet.getNext();
    //    }

    //    return;
    //}

    method void drowAllObjects()
    {
        do player.drowPlayer();
        do base.drowBase();
        do botsList.drowBots();
        do bricksList.drowBricks();
        do bulletsList.drowBullets();

        return;
    }

    method void killObjectsWithBullet()
    {
        var BulletsList currentBullet;
        var Bullet bullet;

        let currentBullet = bulletsList;
        while (~(currentBullet = null))
        {
            let bullet = currentBullet.getData();
            if (bullet.getAlive() = true)
            {
                do player.killPlayerWithBullet(bullet);
                do base.killBaseWithBullet(bullet);
                do botsList.killBotsWithBullet(bullet);
                do bricksList.killBricksWithBullet(bullet);
                do bulletsList.killBulletsWithBullet(bullet);
            }
            let currentBullet = currentBullet.getNext();
        }
        return;
    }

    method void removeDeadObjects()
    {
        do botsList.removeDeadBotsFromList();
        do bricksList.removeDeadBricksFromList();
        do bulletsList.removeDeadBulletsFromList();

        return;
    }

    method void dispose()
    {
        do Memory.deAAlloc(this);
        return;
    }
}