class Bot
{
    field int x;
    field int y;
    field int size;
    field bool alive;
    field Objects map;
    field int direction;
    field int timeBetweenAtacks;

    constructor Bot new(int _x, int _y)
    {
        let x = _x;
        let y = _y;
        let direction = 1;
        let size = 32;
        let alive = true;
        let timeBetweenAtacks = 25;
        return this;
    }

    method int getTimeBetweenAtacks()
    {
        return timeBetweenAtacks;
    }

    method void setMap(Objects _map)
    {
        let map = _map;
        return;
    }

    method int getX()
    {
        return x;
    }

    method void setX(int _x)
    {
        let x = _x;
        return;
    }

    method int getY()
    {
        return y;
    }
    method void setY(int _y)
    {
        let y = _y;
        return;
    }

    method int getDirection()
    {
        return direction;
    }

    method void setDirection(int _direction)
    {
        let direction = _direction;
        return;
    }

    method bool getAlive()
    {
        return alive;
    }
    method void setAlive(bool _alive)
    {
        let alive = _alive;
        return;
    }

    method int getSize()
    {
        return size;
    }
    method void setSize(int _size)
    {
        let size = _size;
        return;
    }

    method void Atack()
    {
        var Bullet newBullet;
        let newBullet = Bullet.new(x, y, direction);
        if (newBullet.getAlive() = true)
        {
            do map.addNewBullet(newBullet);
        }
        return;
    }

    method void moveUp()
    {
        var int newY;
        let newY = y - 2;
        if (BotCollisions.Check(map, this, x, newY) = false)
        {
            let y = Math.max(newY, 1);
        }
        return;
    }

    method void moveDown()
    {
        var int newY;
        let newY = y + 2;
        if (BotCollisions.Check(map, this, x, newY) = false)
        {
            let y = Math.min(newY, 255);
        }
        return;
    }

    method void moveLeft()
    {
        var int newX;
        let newX = x - 2;
        if (BotCollisions.Check(map, this, newX, y) = false)
        {
            let x = Math.max(1, newX);
        }
        return;
    }

    method void moveRight()
    {
        var int newX;
        let newX = x + 2;
        if (BotCollisions.Check(map, this, newX, y) = false)
        {
            let x = Math.min(newX, 511);
        }
        return;
    }

    method void moveBot()
    {
        if (direction = 1)
        {
            do moveUp();
        }

        if (direction = 2)
        {
            do moveDown();
        }
        
        if (direction = 3)
        {
            do moveLeft();
        }

        if (direction = 4)
        {
            do moveRight();
        }

        do Sys.wait(5);
        return;
    }

    method void dispose()
    {

        do Memory.deAAlloc(this);
        return;
    }
}