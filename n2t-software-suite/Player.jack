class Player
{
    field int x, y;
    field int size;
    field int direction;

    constructor Player new (int _x, int _y, int _size){
        let x = _x;
        let y = _y;
        let direction = 4;
        let size = _size;
        return this;
    }

    method int getSize()
    {
        return size;
    }

    method int getX()
    {
        return x;
    }

    method void setX(int _x)
    {
        let x = _x;
        return;
    }

    method int getY()
    {
        return y;
    }
    method void setY(int _y)
    {
        let y = _y;
        return;
    }

    method int getDirection()
    {
        return direction;
    }

    method void setDirection(int _direction)
    {
        let direction = _direction;
        return;
    }

    method void moveUp()
    {
        let y = Math.max(y - 2, 1);
        return;
    }

     method void moveDown() {
        let y = Math.min(y + 2, 255);
        return;
    }

    method void moveLeft() {
        let x = Math.max(1, x - 2);
        return;
    }

    method void moveRight() {
        let x = Math.min(x + 2, 511);
        return;
    }

    method void movePlayer(){
        if (direction = 1)
        {
            do moveUp();
        }
        if (direction = 2)
        {
            do moveDown();
        }
        if (direction = 3)
        {
            do moveLeft();
        }
        if (direction = 4)
        {
            do moveRight();
        }

        do Sys.wait(5);
        return;
    }

    method void dispose(){
        do Memory.deAlloc(this);
        return;
    }
}