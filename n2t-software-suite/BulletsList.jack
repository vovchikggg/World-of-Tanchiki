class BulletsList
{
    field Bullet data;
    field BulletsList next;
    field BulletsList prev;

    constructor BulletsList new(Bullet _data, List _next)
    {
        let data = _data;
        let next = _next;
        return this;
    }

    method Bullet getData()
    {
        return data;
    }

    method BulletsList getNext()
    {
        return next;
    }
    method void setNext(BulletsList _next)
    {
        let next = _next;
        return;
    }

    method BulletsList getPrev()
    {
        return prev;
    }
    method void setPrev(BulletsList _prev)
    {
        let prev = _prev;
        return;
    }

    method void drowBullets()
    {
        var BulletsList currentBullet;
        var Bullet bullet;

        let currentBullet = this;
        while (~(currentBullet = null))
        {
            let bullet = currentBullet.getData();
            if (bullet.getAlive() = true)
            {
                do Drower.DrawBullet(bullet);
            }
            let currentBullet = currentBullet.getNext();
        }

        return;
    }

    method void killBulletsWithBullet(Bullet bullet)
    {
        var BulletsList currentBullet;
        var Bullet bullet;
        var bool exit;

        let currentBullet = this;
        let exit = false;
        while ( (~(currentBullet = null)) & (~(exit)) )
        {
            let bullet = currentBullet.getData();
            if (bullet.getAlive() = true)
            {
                if ( BulletCollisions.CheckCollisionsWithBot(bullet, bullet, bullet.getX(), bullet.getY()) = true )
                {
                    do bullet.setAlive(false);
                    do bullet.setAlive(false);
                    let exit = true;
                }
            }
            let currentBullet = currentBullet.getNext();
        }

        return;
    }

    method void removeDeadBulletsFromList()
    {
        var BulletsList currentBullet;
        var Bullet bullet;

        let currentBullet = this;
        while (~(currentBullet = null))
        {
            let bullet = currentBullet.getData();
            if (bullet.getAlive() = false)
            {
                do removeDeadBullet(currentBullet);
            }
            let currentBullet = currentBullet.getNext();
        }

        return;
    }

    method void removeDeadBullet(BulletsList currentBullet)
    {
        var BulletsList bulletsList;
        var BulletsList prevBullet;
        var BulletsList nextBullet;
        
        let bulletsList = this;
        let prevBullet = currentBullet.getPrev();
        let nextBullet = currentBullet.getNext();

        if (~(prevBullet = null))
        {
            do prevBullet.setNext(nextBullet);
            if (~(nextBullet = null))
            {
                do nextBullet.setPrev(prevBullet);
            }
        }
        else
        {
            let bulletsList = bulletsList.getNext();
            if (~(bulletsList = null))
            {
                do bulletsList.setPrev(null);
            }
        }

        return;
    }

    method void moveBullets()
    {
        var BulletsList currentBullet;
        var Bullet bullet;

        let currentBullet = this;
        while (~(currentBullet = null))
        {
            let bullet = currentBullet.getData();
            do bullet.moveBullet();

            let currentBullet = currentBullet.getNext();
        }

        return;
    }

    method void clearBullets()
    {
        var BulletsList currentBullet;
        var Bullet bullet;

        let currentBullet = this;
        while (~(currentBullet = null))
        {
            let bullet = currentBullet.getData();

            do Drower.clearBullet(bullet);
            let currentBullet = currentBullet.getNext();
        }
        return;
    }

    method void dispose()
    {
        do data.dispose();
        do Memory.deAlloc(this);
        return;
    }
}